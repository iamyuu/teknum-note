---
import { readdir, readFile } from "node:fs/promises";
import { resolve } from "node:path";
import { fileURLToPath } from "node:url";
import { Metadata, metadataSchema } from "~/service/Metadata";
import { Sidebar } from "./sidebar";

import "~/styles/global.scss";
import "@fontsource/space-grotesk/400.css";
import "@fontsource/space-grotesk/500.css";
import "@fontsource/space-grotesk/600.css";
import "@fontsource/unbounded/400.css";
import "@fontsource/unbounded/600.css";
import "@fontsource/jetbrains-mono/600.css";

const CHATS_PATH = "../../chats";

const files = await readdir(resolve(fileURLToPath(import.meta.url), CHATS_PATH), { withFileTypes: true });
const readFileInstructions: Promise<string>[] = [];
for await (const file of files) {
	// Only read the directories, because we are on the first level
	// Ignore non-directory
	if (file.isDirectory()) {
		if (file.name === "photos" || file.name === "stickers" || file.name === "videos") {
			// We don't need to traverse these
			continue;
		}

		const levelTwoFiles = await readdir(resolve(fileURLToPath(import.meta.url), CHATS_PATH, file.name), {
			withFileTypes: true,
		});
		for (const levelTwoFile of levelTwoFiles) {
			// We would like to search for metadata.json only
			if (levelTwoFile.name === "metadata.json") {
				readFileInstructions.push(
					readFile(resolve(fileURLToPath(import.meta.url), CHATS_PATH, file.name, levelTwoFile.name), {
						encoding: "utf-8",
					})
				);
			}
		}
	}
}

const talks: Metadata[] = await Promise.all(
	readFileInstructions.map(async (file) => metadataSchema.parse(JSON.parse(await file)))
);

const pathname = Astro.url.pathname;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
		<script>
			import "../scripts/spa-navigation";
		</script>
	</head>
	<body>
		<div class="container">
			<Sidebar talks={talks} pathname={pathname} client:load />
			<div class="chat-content" id="chat-content">
				<slot />
			</div>
		</div>
	</body>
</html>

<style lang="scss">
	@use "../styles/variables.scss";

	.container {
		position: relative;
		max-width: 1400px;
		height: 100%;
		margin: 0 auto;
		padding: 2rem;
		display: grid;
		gap: 2rem;
		grid-template-columns: 42rem 1fr;
	}

	.chat-content {
		position: relative;
		height: 100%;
		max-height: inherit;
	}
</style>
